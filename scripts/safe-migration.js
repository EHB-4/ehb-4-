#!/usr/bin/env node

/**
 * EHB Safe Project Migration Script
 * This script safely migrates the project to a new clean state
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('🚀 EHB Safe Project Migration Script');
console.log('=====================================\n');

// Step 1: Create backup
console.log('📦 Step 1: Creating backup...');
try {
  execSync('git branch backup-before-migration', { stdio: 'inherit' });
  console.log('✅ Backup created: backup-before-migration\n');
} catch (error) {
  console.log('⚠️  Backup already exists or failed\n');
}

// Step 2: Check current status
console.log('📊 Step 2: Checking current status...');
try {
  const status = execSync('git status --porcelain', { encoding: 'utf8' });
  if (status.trim()) {
    console.log('📝 Found uncommitted changes:');
    console.log(status);
  } else {
    console.log('✅ No uncommitted changes found');
  }
} catch (error) {
  console.log('❌ Error checking status:', error.message);
}

console.log('');

// Step 3: Add all changes
console.log('➕ Step 3: Adding all changes...');
try {
  execSync('git add .', { stdio: 'inherit' });
  console.log('✅ All changes added\n');
} catch (error) {
  console.log('❌ Error adding changes:', error.message);
  process.exit(1);
}

// Step 4: Commit changes
console.log('💾 Step 4: Committing changes...');
const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
const commitMessage = `EHB Project Migration - Clean State ${timestamp}`;

try {
  execSync(`git commit -m "${commitMessage}"`, { stdio: 'inherit' });
  console.log('✅ Changes committed\n');
} catch (error) {
  console.log('❌ Error committing changes:', error.message);
  process.exit(1);
}

// Step 5: Force push with confirmation
console.log('🚀 Step 5: Force pushing to GitHub...');
console.log('⚠️  WARNING: This will overwrite the GitHub repository!');
console.log('⚠️  All team members will need to reset their local repositories');
console.log('');

const readline = require('readline');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

rl.question('Are you sure you want to continue? Type "YES" to proceed: ', answer => {
  if (answer === 'YES') {
    try {
      console.log('\n🔄 Force pushing...');
      execSync('git push origin main --force', { stdio: 'inherit' });
      console.log('✅ Force push completed successfully!\n');

      // Step 6: Generate team notification
      console.log('📢 Step 6: Generating team notification...');
      generateTeamNotification();
    } catch (error) {
      console.log('❌ Error during force push:', error.message);
      process.exit(1);
    }
  } else {
    console.log('❌ Migration cancelled');
    process.exit(0);
  }

  rl.close();
});

function generateTeamNotification() {
  const notification = `# 🚨 EHB Project Migration Completed

## 📅 Date: ${new Date().toLocaleString()}

### ✅ Migration Status: SUCCESSFUL

### 🔄 Team Members - Required Actions:

1. **Backup your work:**
   \`\`\`bash
   git stash push -m "backup-before-migration"
   \`\`\`

2. **Reset to new state:**
   \`\`\`bash
   git fetch origin
   git reset --hard origin/main
   git clean -fd
   \`\`\`

3. **Reinstall dependencies:**
   \`\`\`bash
   rm -rf node_modules package-lock.json
   npm install
   \`\`\`

4. **Restore your work (if needed):**
   \`\`\`bash
   git stash list
   git stash pop stash@{0}
   \`\`\`

### 🆕 What's New:
- Clean Next.js 14+ setup
- TypeScript configuration
- Tailwind CSS
- Component library
- Auto-deployment system

### 📞 Support:
Contact the development team if you encounter any issues.

---
**Generated by EHB Migration Script**`;

  fs.writeFileSync('MIGRATION_NOTIFICATION.md', notification);
  console.log('✅ Team notification generated: MIGRATION_NOTIFICATION.md');

  console.log('\n🎉 Migration completed successfully!');
  console.log('📋 Next steps:');
  console.log('   1. Share MIGRATION_NOTIFICATION.md with your team');
  console.log('   2. Team members should follow the instructions');
  console.log('   3. Monitor for any issues during transition');
}
