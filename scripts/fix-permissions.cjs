const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class PermissionFixer {
  constructor() {
    this.projectRoot = process.cwd();
    this.ignoredPaths = new Set(['node_modules', '.git', '.next', 'build', 'dist', 'coverage']);
  }

  log(message) {
    console.log(`[${new Date().toISOString()}] ${message}`);
  }

  async fixGitIgnore() {
    const gitignorePath = path.join(this.projectRoot, '.gitignore');
    const cursorOverridePath = path.join(this.projectRoot, '.cursor-ignore-override');

    let content = `# Generated by fix-permissions.cjs
# Dependencies
node_modules/
.pnp
.pnp.js

# Testing
coverage/

# Next.js
.next/
out/

# Production
build/
dist/

# Misc
.DS_Store
*.pem

# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Local env files
.env*.local

# Allow these files
!.env.example
!.env.development
!.env.test
!.cursor/
!.vscode/
!scripts/
!config/

# Vercel
.vercel

# TypeScript
*.tsbuildinfo
next-env.d.ts

# Cursor specific
.cursor-log/
!.cursor/settings.json
!.cursor/workspace.json

# Keep configuration files
!*.config.js
!*.config.ts
!.eslintrc*
!.prettierrc*
!.babelrc*
!next.config.js
!postcss.config.js
!tailwind.config.js
`;

    fs.writeFileSync(gitignorePath, content);
    fs.writeFileSync(cursorOverridePath, '# Override global ignores\n' + content);

    this.log('‚úÖ Updated .gitignore and created override file');
  }

  async fixCursorConfig() {
    const cursorDir = path.join(this.projectRoot, '.cursor');
    if (!fs.existsSync(cursorDir)) {
      fs.mkdirSync(cursorDir, { recursive: true });
    }

    const settingsPath = path.join(cursorDir, 'settings.json');
    const settings = {
      projectId: 'ehb-next-js-04',
      environment: 'development',
      telemetry: true,
      analytics: true,
      ignorePatterns: [],
      typescript: {
        enabled: true,
        validateOnSave: true,
      },
      formatting: {
        enabled: true,
        formatOnSave: true,
      },
      linting: {
        enabled: true,
        lintOnSave: true,
      },
      git: {
        enabled: true,
        autoFetch: true,
        autoPush: true,
      },
    };

    fs.writeFileSync(settingsPath, JSON.stringify(settings, null, 2));
    this.log('‚úÖ Updated Cursor settings');
  }

  async fixEnvironmentFiles() {
    const envContent = `# Development Environment
NODE_ENV=development
PORT=5500
NEXT_PUBLIC_API_URL=http://localhost:5500/api
NEXTAUTH_URL=http://localhost:5500
NEXTAUTH_SECRET=dev-secret-key-${Date.now()}

# Database
DATABASE_URL="mongodb://localhost:27017/ehb"

# Development Settings
DEBUG=true
NEXT_TELEMETRY_DISABLED=1

# Cursor Settings
CURSOR_ENABLE_TELEMETRY=1
CURSOR_ENABLE_ANALYTICS=1
CURSOR_ENVIRONMENT=development
`;

    fs.writeFileSync(path.join(this.projectRoot, '.env.development'), envContent);

    if (!fs.existsSync(path.join(this.projectRoot, '.env'))) {
      fs.copyFileSync(
        path.join(this.projectRoot, '.env.development'),
        path.join(this.projectRoot, '.env')
      );
    }

    this.log('‚úÖ Created environment files');
  }

  async fixPermissions() {
    const chmod = (file, mode) => {
      try {
        fs.chmodSync(file, mode);
      } catch (error) {
        this.log(`‚ö†Ô∏è Could not change permissions for ${file}: ${error.message}`);
      }
    };

    // Fix script permissions
    const scriptsDir = path.join(this.projectRoot, 'scripts');
    if (fs.existsSync(scriptsDir)) {
      fs.readdirSync(scriptsDir).forEach(file => {
        const filePath = path.join(scriptsDir, file);
        chmod(filePath, 0o755);
      });
    }

    // Fix git hooks
    const hooksDir = path.join(this.projectRoot, '.git', 'hooks');
    if (fs.existsSync(hooksDir)) {
      fs.readdirSync(hooksDir).forEach(file => {
        const filePath = path.join(hooksDir, file);
        chmod(filePath, 0o755);
      });
    }

    this.log('‚úÖ Fixed file permissions');
  }

  async setupGitHooks() {
    const hooksDir = path.join(this.projectRoot, '.git', 'hooks');
    const hookContent = `#!/bin/sh
# Generated by fix-permissions.cjs
set -e

echo "Running pre-commit hooks..."

# Run linting
npm run lint

# Run type checking
npm run type-check

# Run tests
npm test

# Auto-format files
npm run format
`;

    fs.writeFileSync(path.join(hooksDir, 'pre-commit'), hookContent);
    fs.chmodSync(path.join(hooksDir, 'pre-commit'), 0o755);

    this.log('‚úÖ Set up Git hooks');
  }

  async run() {
    this.log('üöÄ Starting permission and configuration fixes...');

    try {
      await this.fixGitIgnore();
      await this.fixCursorConfig();
      await this.fixEnvironmentFiles();
      await this.fixPermissions();
      await this.setupGitHooks();

      // Clear any cached files in git
      execSync('git rm -r --cached .');
      execSync('git add .');

      this.log('‚úÖ All fixes completed successfully!');
      this.log('');
      this.log('Next steps:');
      this.log('1. Restart Cursor');
      this.log('2. Run npm install');
      this.log('3. Run npm run dev:5500');
    } catch (error) {
      this.log(`‚ùå Error during fixes: ${error.message}`);
      process.exit(1);
    }
  }
}

// Run if called directly
if (require.main === module) {
  const fixer = new PermissionFixer();
  fixer.run();
}

module.exports = PermissionFixer;
