// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  wallet        Wallet?
  sqlProfile    SQLProfile?
  coinLocks     CoinLock[]
  transactions  Transaction[]

  // SQL Level related fields
  sqlLevel      Int       @default(1)
  sqlVerified   Boolean   @default(false)
  sqlRequested  Int?
  sqlStatus     String    @default("pending") // pending, verified, rejected

  // KYC related fields
  kycStatus     String    @default("pending") // pending, approved, rejected
  kycDocuments  Json?     // Array of document URLs
  kycRejectedAt DateTime?
  kycRejectReason String?

  // Account related fields
  accounts      Account[]
  sessions      Session[]
}

model Wallet {
  id            String        @id @default(cuid())
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance       Decimal       @default(0)
  currency      String        @default("USD")
  transactions  Transaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  coinLocks     CoinLock[]
}

model Transaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Decimal
  type        String   // "DEPOSIT" | "WITHDRAWAL" | "TRANSFER" | "BONUS"
  status      String   // "PENDING" | "COMPLETED" | "FAILED"
  reference   String?  @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SQLProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  level         Int      @default(1)
  isActive      Boolean  @default(true)
  lastUpgraded  DateTime?
  totalIncome   Decimal  @default(0)
  activeMembers Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model CoinLock {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Float
  duration    Int      // in days
  startDate   DateTime @default(now())
  endDate     DateTime
  status      String   // "ACTIVE" | "COMPLETED" | "CANCELLED"
  bonusRate   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 