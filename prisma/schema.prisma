// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders     Order[]
  reviews    Review[]
  wishlist   Product[]
  cart       CartItem[]
  wallet     Wallet?
  profile    Profile?
  kyc        KYC?
  
  // Franchise relationships
  franchiseApplications FranchiseApplication[]
  ownedFranchises       Franchise[]
  
  @@map("users")
}

model Profile {
  id          String  @id @default(cuid())
  userId      String  @unique
  avatar      String?
  phone       String?
  address     String?
  city        String?
  country     String?
  postalCode  String?
  bio         String?
  
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("profiles")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  images      String[]
  category    String
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  reviews     Review[]
  cartItems   CartItem[]
  wishlist    User[]
  orders      OrderItem[]
  
  @@map("products")
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model CartItem {
  id        String @id @default(cuid())
  userId    String
  productId String
  quantity  Int    @default(1)

  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("cart_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("reviews")
}

model Wallet {
  id      String  @id @default(cuid())
  userId  String  @unique
  balance Float   @default(0)
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("wallets")
}

model KYC {
  id          String   @id @default(cuid())
  userId      String   @unique
  status      KYCStatus @default(PENDING)
  documents   String[]
  verifiedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("kyc")
}

model Franchise {
  id           String   @id @default(cuid())
  name         String
  category     String   // health, education, law, travel, books
  level        String   // Corporate, Master, Sub
  investment   Float
  description  String?
  requirements String[] // Array of requirements
  roi          Float    // Return on Investment percentage
  popularity   Int      // Popularity score (0-100)
  status       String   @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  ownerId      String?
  owner        User?    @relation(fields: [ownerId], references: [id])
  applications FranchiseApplication[]

  @@map("franchises")
}

model FranchiseApplication {
  id               String   @id @default(cuid())
  franchiseId      String
  userId           String
  personalInfo     Json     // Personal information object
  businessPlan     String?  // Business plan text
  financialInfo    Json     // Financial information object
  experience       String?  // Previous experience
  investmentAmount Float
  preferredLocation String?
  status           String   @default("PENDING") // PENDING, APPROVED, REJECTED, UNDER_REVIEW
  submittedAt      DateTime @default(now())
  reviewedAt       DateTime?
  reviewedBy       String?
  notes            String?  // Review notes
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  franchise Franchise @relation(fields: [franchiseId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("franchise_applications")
}

enum Role {
  USER
  ADMIN
  FRANCHISE_OWNER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum KYCStatus {
  PENDING
  APPROVED
  REJECTED
}
