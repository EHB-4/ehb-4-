{"_id":"react-use-timeout","_rev":"1-84966ee965e50315c229fa0b9c6f8b9c","name":"react-use-timeout","dist-tags":{"latest":"1.0.0"},"versions":{"1.0.0":{"name":"react-use-timeout","version":"1.0.0","description":"React hooks for setTimeout and setInterval.","main":"index.js","repository":{"type":"git","url":"https://github.com/rally25rs/react-use-timeout"},"author":{"name":"Jeff Valore","url":"https://github.com/rally25rs"},"license":"MIT","private":false,"keywords":["react"],"scripts":{"build":"rollup -c","test":"rollup -c && jest"},"dependencies":{"react":">=16.8.0"},"peerDependencies":{"react":">=16.8.0"},"devDependencies":{"@babel/core":"7.4.0","@babel/preset-env":"7.4.2","@babel/preset-react":"7.0.0","babel-jest":"24.5.0","jest":"24.5.0","react-dom":"16.8.5","rollup":"1.7.0","rollup-plugin-babel":"4.3.2"},"_id":"react-use-timeout@1.0.0","dist":{"shasum":"d156e146d33239ccb5a217c369f37bc2e56bbe93","integrity":"sha512-WY4KTWH4kIRlGsmaush+zYo68B/pFY2HvSIPEf7cO5abv9bEVAmkUjggVOUXZaK8Y51fW7Iyr32VvIsYmD9Jhg==","tarball":"https://registry.npmjs.org/react-use-timeout/-/react-use-timeout-1.0.0.tgz","fileCount":6,"unpackedSize":6680,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcljKcCRA9TVsSAnZWagAAlswP/0iXNQGmNdGWk3pYt2o8\n8dhzR5qVNsNuLIn9RkOsTI17LWfRcODB2miwsCcR1zWBPEu5oCOQEimm5PYd\nJzWKdpiGiXqJjxd/Mbx0eqyXFJ/aDEjkf6CQkhSBzU06fHca7AeWjb0vFNP2\ngLX6mbKSLu9FFE85V8hnvEv1bseRvHE+LC6fRnTga8IbfuUYonf27hjt9rbP\nDi2cp4HBBlpLDW6a/YmLuR6g+Ncc1Jp+oGODBO41CdWVJxHdNpNHdiVvizY8\nOfb/DUg4lBKcmC8iNSXFO20F8bZjuDgri+FrsxDP8oMOdlxPDSxtkLp021gN\np1PU7B+/+iGk2zH72TKPOO+jyDr4arT1/MTq2ForK47h3FmwwGzy1yQM5aV6\nuVmPShTrls7RhfMWFciBzXP/lZ6HaEeSLbVxRAx8DrXB4IWhbrivLYb7T8uX\npYG8JiKCmLwnumbHGTNiFp0J8WRAXmQBPuYyIy0IF7LfVpdZ/HkyarOnqgWX\nVJgtVxQ3Z3TAofCEUGyw6WaTsa+ae63MVkaJDH3wAh0TGSvhbgjp2LfYjdZC\nHRd/Zh+I5f28On8B7z8eK4UY4ExhBoavKlVn4Mgj07zVD19agp3SHh1W1IHR\nPk74Q9Oq7ni7ln1fnkp7myfxp82MFe4oFMPnEfNEYbDz/zBqMXqXp9oDOi03\nCa3B\r\n=oEwO\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAbFAsUMnCtHJwJMp/ADY1BA65FPEqT5xL+ii7EledwFAiAsH7eKSfYKX0wxok9qOscmS1jxRZ+cQwiqfIrg7hKsyw=="}]},"maintainers":[{"name":"codingwithspike","email":"codingwithspike@gmail.com"}],"_npmUser":{"name":"codingwithspike","email":"codingwithspike@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/react-use-timeout_1.0.0_1553347227504_0.01040784628676139"},"_hasShrinkwrap":false}},"time":{"created":"2019-03-23T13:20:27.503Z","1.0.0":"2019-03-23T13:20:27.652Z","modified":"2022-05-15T07:12:07.818Z"},"maintainers":[{"name":"codingwithspike","email":"codingwithspike@gmail.com"}],"description":"React hooks for setTimeout and setInterval.","keywords":["react"],"repository":{"type":"git","url":"https://github.com/rally25rs/react-use-timeout"},"author":{"name":"Jeff Valore","url":"https://github.com/rally25rs"},"license":"MIT","readme":"## react-use-timeout\n\nReact hooks that wrapper standard JS `setTimeout` and `setInterval`.\n\n### Why would I use this?\n\n#### Helps prevent memory leaks.\n\nNormally you would have to remember to clear your unfinished timeouts before a component is detached. For example to manage a simple timeout:\n\n```\nimport React, {useEffect, useRef} from 'react';\n\nexport default function Example() {\n  // save off the id of the timeout so we can cancel it later.\n  const timeout = useRef();\n\n  useEffect(() => {\n    // start timeout\n    timeout.current = setTimeout(doSomething, 30000);\n\n    // cleanup function to cancel the timeout if it hasn't finished.\n    return () => {\n      if (timeout.current) {\n        clearTimeout(timeout.current);\n      }\n    };\n  }, []);\n\n  return <div />\n}\n```\n\nIf you forget to return a cleanup function from the `useEffect` that clears the timeout, then it could cause a memory leak (depending on what variables are held in the closure) or cause a react warning if the callback changes state on the component but the component is unmounted befire the timeout fires.\n\n#### Less code\n\nInstead of the above example of using a `setTimeout`, this is the same code with the hook:\n\n```\nimport React, {useEffect} from 'react';\nimport {useTimeout} from 'react-use-timeout';\n\nexport default function Example() {\n  const timeout = useTimeout(doSomething, 30000);\n\n  useEffect(() => {\n    timeout.start();\n  }, []);\n\n  return <div />\n}\n```\n\n#### Mockable for testing\n\nIt is easier to mock these hooks then to mock `setTimeout`.\n\nExamples in Jest:\n\n```\n// Mock the useTimeout hook to execute all timeouts at 0ms\njest.mock('react-use-timeout', () => {\n  return {\n    useTimeout: jest.fn(callback => setTimeout(callback, 0)),\n  };\n});\n```\n\n```\n// Mock the hooks to never execute timeouts\njest.mock('react-use-timeout', () => {\n  return {\n    useTimeout: () => {},\n    useInterval: () => {},\n  };\n});\n```\n\n### How to Use\n\nYou can install this library using\n\n```\nnpm add react-use-timeout\n```\nor\n```\nyarn add react-use-timeout\n```\n\nThen you can import it into your component\n\n```\nimport {useTimeout, useInterval} from 'react-use-timeout';\n```\n\n#### useTimeout\n\nCall the hook to get an instance of a timeout. You pass a callback to execute, and optionally a timeout to execute it at (the default is 0ms). _Note that the timeout does not start yet. You need to call `.start()` on the returned object._\n\nThe returned `timeout` instance provides 2 functions:\n\n* `.start(timeout)` : Start the timeout. Optionally you can pass a new timeout duration. If passed, this will override the duration passed to `useTimeout()`\n* `.stop()` : Cancels the timeout.\n\n```\nimport React, {useEffect, useCallback, useState} from 'react';\nimport {useTimeout} from 'react-use-timeout';\n\n// This component would change it's text color from green to red 10 seconds after it was mounted.\nexport default function Example() {\n  const [color, setColor] = useState('green');\n\n  const changeColor = useCallback(() => {\n    setColor('red');\n  });\n\n  const timeout = useTimeout(changeColor, 10000);\n\n  useEffect(() => {\n    timeout.start();\n  }, []);\n\n  return <div style={{color}} />\n}\n```\n\n#### useInterval\n\nCall the hook to get an instance of an interval. You pass a callback to execute, and optionally a interval to execute it at. _Note that the interval does not start yet. You need to call `.start()` on the returned object._\n\nThe returned `interval` instance provides 2 functions:\n\n* `.start(timeout)` : Start the intrval. Optionally you can pass a new timeout duration. If passed, this will override the duration passed to `useInterval()`\n* `.stop()` : Cancels the interval.\n\n```\nimport React, {useEffect, useCallback, useState} from 'react';\nimport {useInterval} from 'react-use-timeout';\n\n// This component would alternate it's color between green and red each 1 second after it was mounted.\nexport default function Example() {\n  const [color, setColor] = useState('green');\n\n  const toggleColor = useCallback(() => {\n    setColor(color === 'green' ? 'red', 'green');\n  });\n\n  const interval = useInterval(toggleColor, 1000);\n\n  useEffect(() => {\n    interval.start();\n  }, []);\n\n  return <div style={{color}} />\n}\n```\n","readmeFilename":"README.md"}